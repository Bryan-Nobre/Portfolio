// Seleciona o elemento <canvas> e obt√©m o contexto 2D para desenhar
const canvas = document.getElementById("ropeCanvas");
const ctx = canvas.getContext("2d");

// Define o ponto fixo de origem da corda (topo central do canvas)
let origin = { x: canvas.width / 2, y: 0 };
// Define a posi√ß√£o inicial da "al√ßa" da corda (ponto m√≥vel)
let handle = { x: canvas.width / 2, y: 150 };

// Vetor de velocidade da al√ßa em X e Y (para simula√ß√£o f√≠sica)
let velocity = { x: 0, y: 0 };

// Controle se o usu√°rio est√° arrastando a al√ßa
let isDragging = false;

// Par√¢metros f√≠sicos da simula√ß√£o
let friction = 0.9;  // fator que reduz a velocidade (amortecimento)
let spring = 0.1;    // for√ßa da mola que puxa a al√ßa para a origem

// Flag para evitar m√∫ltiplas trocas de tema em curto per√≠odo
let pulled = false;

// Evento para detectar in√≠cio do clique/arrasto na al√ßa da corda
canvas.addEventListener("mousedown", (e) => {
  const rect = canvas.getBoundingClientRect();

  // Calcula posi√ß√£o do clique dentro do canvas
  const x = e.clientX - rect.left;
  const y = e.clientY - rect.top;

  // Calcula dist√¢ncia do clique at√© a al√ßa (ponto m√≥vel)
  const dx = x - handle.x;
  const dy = y - handle.y;

  // Se o clique est√° dentro do c√≠rculo da al√ßa (raio 30px), inicia arrasto
  if (Math.sqrt(dx * dx + dy * dy) < 30) {
    isDragging = true;
  }
});

// Evento para detectar quando o usu√°rio solta o clique (fim do arrasto)
canvas.addEventListener("mouseup", () => {
  // Se estava arrastando e puxou a al√ßa para baixo al√©m do limite (y > 220)
  // e ainda n√£o trocou o tema recentemente
  if (isDragging && handle.y > 220 && !pulled) {
    toggleTheme();   // Alterna o tema dark/light
    pulled = true;   // Marca que a troca j√° aconteceu

    // Ap√≥s 1 segundo, permite nova troca de tema
    setTimeout(() => pulled = false, 1000);
  }
  isDragging = false; // Finaliza arrasto
});

// Evento para mover a al√ßa conforme o mouse durante o arrasto
canvas.addEventListener("mousemove", (e) => {
  if (isDragging) {
    const rect = canvas.getBoundingClientRect();

    // Atualiza a posi√ß√£o da al√ßa conforme o mouse no canvas
    handle.x = e.clientX - rect.left;
    handle.y = e.clientY - rect.top;
  }
});

// Fun√ß√£o que alterna o tema entre dark e light

function toggleTheme() {
  const body = document.body;
  const isDark = body.classList.contains("dark");

  // Alterna as classes 'dark' e 'light' no <body>
  body.classList.toggle("dark", !isDark);
  body.classList.toggle("light", isDark);

  // Armazena a prefer√™ncia no localStorage para persist√™ncia
  localStorage.setItem("theme", !isDark ? "dark" : "light");

  // Reproduz som de clique para feedback auditivo
  const audio = new Audio("https://freesound.org/data/previews/256/256113_3263906-lq.mp3");
  audio.volume = 0.5;
  audio.play();
}

// Fun√ß√£o para restaurar o tema salvo no localStorage ao carregar a p√°gina
function restoreTheme() {
  const saved = localStorage.getItem("theme") || "dark";
  document.body.classList.add(saved);
}

// Fun√ß√£o principal que atualiza a f√≠sica da corda e redesenha a cena
function updatePhysics() {
  if (!isDragging) {
    // Calcula a for√ßa da mola puxando a al√ßa de volta para a origem
    let forceX = (origin.x - handle.x) * spring;
    let forceY = (origin.y + 150 - handle.y) * spring;

    // Aplica a for√ßa na velocidade atual
    velocity.x += forceX;
    velocity.y += forceY;

    // Aplica atrito para reduzir a velocidade gradualmente (amortecimento)
    velocity.x *= friction;
    velocity.y *= friction;

    // Atualiza a posi√ß√£o da al√ßa conforme a velocidade calculada
    handle.x += velocity.x;
    handle.y += velocity.y;
  }

  // Desenha o estado atual no canvas
  draw();

  // Solicita a pr√≥xima atualiza√ß√£o do quadro (loop de anima√ß√£o)
  requestAnimationFrame(updatePhysics);
}

// Fun√ß√£o que desenha a corda, a al√ßa, o emoji e o efeito de luz no canvas
function draw() {
  // Limpa o canvas para novo desenho
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  // Desenha a corda (linha entre a origem fixa e a al√ßa m√≥vel)
  ctx.beginPath();
  ctx.moveTo(origin.x, origin.y);
  ctx.lineTo(handle.x, handle.y);
  ctx.strokeStyle = "#444";
  ctx.lineWidth = 4;
  ctx.stroke();

  // Se a corda foi puxada recentemente, desenha efeito de luz (glow) na al√ßa
  if (pulled) {
    const gradient = ctx.createRadialGradient(handle.x, handle.y, 10, handle.x, handle.y, 40);
    gradient.addColorStop(0, "rgba(255, 255, 100, 0.8)");
    gradient.addColorStop(1, "rgba(255, 255, 100, 0)");
    ctx.beginPath();
    ctx.arc(handle.x, handle.y, 40, 0, Math.PI * 2);
    ctx.fillStyle = gradient;
    ctx.fill();
  }

  // Desenha a al√ßa da corda (c√≠rculo preenchido)
  ctx.beginPath();
  ctx.arc(handle.x, handle.y, 25, 0, Math.PI * 2);
  ctx.fillStyle = "#999";
  ctx.fill();

  // Desenha o emoji (sol ou lua) no centro da al√ßa, conforme o tema atual
  ctx.font = "20px sans-serif";
  ctx.textAlign = "center";
  ctx.textBaseline = "middle";
  const emoji = document.body.classList.contains("dark") ? "‚òÄÔ∏è" : "üåô";
  ctx.fillText(emoji, handle.x, handle.y);
}



// Inicializa o tema salvo e come√ßa o loop de f√≠sica
restoreTheme();
updatePhysics();

